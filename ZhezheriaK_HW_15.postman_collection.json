{
	"info": {
		"_postman_id": "da22f563-2f3d-47f6-9a90-e0769f532fe7",
		"name": "ZhezheriaK_HW_15",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28333237"
	},
	"item": [
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Add new user (all negative cases)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let invalidNamesWithMessages = [",
									"    { name: \"\", message: \"\\\"name\\\" is not allowed to be empty\" },",
									"    { name: \"M\", message: \"Name has to be from 2 to 20 characters long\" },",
									"    { name: \"Loremipsumdolorsitamd\", message: \"Name has to be from 2 to 20 characters long\" },",
									"    { name: \"123\", message: \"Name is invalid\" },",
									"    { name: \"!_)\", message: \"Name is invalid\" },",
									"    { name: null, message: \"Name is invalid\" },",
									"    { name: \"Марі\", message: \"Name is invalid\" }",
									"];",
									"",
									"pm.environment.set(\"invalidNamesWithMessages\", JSON.stringify(invalidNamesWithMessages));",
									"",
									"if (!pm.environment.get(\"nameIndex\")) {",
									"    pm.environment.set(\"nameIndex\", 0);",
									"}",
									"",
									"let nameIndex = parseInt(pm.environment.get(\"nameIndex\"));",
									"",
									"let invalidName = invalidNamesWithMessages[nameIndex].name;",
									"if (invalidName !== null) {",
									"    invalidName = \"\\\"\" + invalidName + \"\\\"\";",
									"}",
									"pm.variables.set(\"invalidName\", invalidName);",
									"pm.variables.set(\"expectedMessage\", invalidNamesWithMessages[nameIndex].message);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"let expectedMessage = pm.variables.get(\"expectedMessage\");",
									"",
									"pm.test(\"Error message validation\", function () {",
									"    pm.expect(jsonData.status).to.be.equal(\"error\");",
									"    pm.expect(jsonData.message).to.be.equal(expectedMessage);",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let nameIndex = parseInt(pm.environment.get(\"nameIndex\"));",
									"nameIndex++;",
									"",
									"let invalidNamesWithMessages = JSON.parse(pm.environment.get(\"invalidNamesWithMessages\"));",
									"",
									"if (nameIndex < invalidNamesWithMessages.length) {",
									"    pm.environment.set(\"nameIndex\", nameIndex);",
									"    pm.execution.setNextRequest(pm.info.requestName);",
									"} else {",
									"    pm.environment.unset(\"nameIndex\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{invalidName}},\n    \"lastName\": \"Star\",\n    \"email\": \"MaryStar124@testemail.com\",\n    \"password\": \"TestPass123!\",\n    \"repeatPassword\": \"TestPass123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}');",
									"",
									"function generatePassword() {",
									"    const upperChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    const lowerChars = 'abcdefghijklmnopqrstuvwxyz';",
									"    const digits = '0123456789';",
									"    const symbols = '!@#$%^&*()_+-=[]{}|;:/,.<>?';",
									"",
									"    let result = '';",
									"",
									"    for (let i = 0; i < 3; i++) {",
									"        result += upperChars.charAt(Math.floor(Math.random() * upperChars.length));",
									"    }",
									"    for (let i = 0; i < 3; i++) {",
									"        result += lowerChars.charAt(Math.floor(Math.random() * lowerChars.length));",
									"    }",
									"    for (let i = 0; i < 3; i++) {",
									"        result += digits.charAt(Math.floor(Math.random() * digits.length));",
									"    }",
									"    for (let i = 0; i < 3; i++) {",
									"        result += symbols.charAt(Math.floor(Math.random() * symbols.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"pm.environment.set(\"password\", generatePassword());",
									"pm.environment.set(\"email\", randomEmail);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"status\": { \"type\": \"string\" },",
									"    \"data\": { \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userId\": { \"type\": \"integer\"},",
									"            \"photoFilename\": { \"type\": \"string\" },",
									"            \"distanceUnits\": { \"type\": \"string\" },",
									"            \"currency\": { \"type\": \"string\" },",
									"        }",
									"    }",
									"  },",
									"};",
									"",
									"pm.test('Response matches JSON schema', function() {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"Email is valid\", function() {",
									"    pm.expect(requestBody.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
									"});",
									"",
									"pm.environment.set(\"userID\", pm.response.json().data.userId);",
									"pm.environment.set(\"lastName\", requestBody.lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"repeatPassword\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user's profile (all negative cases)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let invalidNamesWithMessages = [",
									"    { name: \"\", message: \"Name is required\" },",
									"    { name: \"M\", message: \"Name must be at least 2 characters long\" },",
									"    { name: \"Loremipsumdolorsitamd\", message: \"Name must be at most 20 characters long\" },",
									"    { name: \"123\", message: \"Invalid name\" },",
									"    { name: \"!_)\", message: \"Invalid name\" },",
									"    { name: null, message: \"Invalid name\" },",
									"    { name: \"Марі\", message: \"Invalid name\" }",
									"];",
									"",
									"pm.environment.set(\"invalidNamesWithMessages\", JSON.stringify(invalidNamesWithMessages));",
									"",
									"if (!pm.environment.get(\"nameIndex\")) {",
									"    pm.environment.set(\"nameIndex\", 0);",
									"}",
									"",
									"let nameIndex = parseInt(pm.environment.get(\"nameIndex\"));",
									"",
									"let invalidName = invalidNamesWithMessages[nameIndex].name;",
									"if (invalidName !== null) {",
									"    invalidName = \"\\\"\" + invalidName + \"\\\"\";",
									"}",
									"pm.variables.set(\"invalidName\", invalidName);",
									"pm.variables.set(\"expectedMessage\", invalidNamesWithMessages[nameIndex].message);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"status\": { \"type\": \"string\" },",
									"        \"data\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"userId\": { \"type\": \"integer\" },",
									"                \"photoFilename\": { \"type\": \"string\" },",
									"                \"name\": { \"type\": \"string\" },",
									"                \"lastName\": { \"type\": \"string\" },",
									"                \"dateBirth\": { \"type\": \"string\" },",
									"                \"country\": { \"type\": \"string\" },",
									"",
									"",
									"            }",
									"        }",
									"    },",
									"};",
									"",
									"pm.test('Response matches JSON schema', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"let expectedMessage = pm.variables.get(\"expectedMessage\");",
									"",
									"pm.test(\"Error message validation\", function () {",
									"    pm.expect(jsonData.status).to.be.equal(\"error\");",
									"    pm.expect(jsonData.message).to.be.equal(expectedMessage);",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let nameIndex = parseInt(pm.environment.get(\"nameIndex\"));",
									"nameIndex++;",
									"",
									"let invalidNamesWithMessages = JSON.parse(pm.environment.get(\"invalidNamesWithMessages\"));",
									"",
									"if (nameIndex < invalidNamesWithMessages.length) {",
									"    pm.environment.set(\"nameIndex\", nameIndex);",
									"    pm.execution.setNextRequest(pm.info.requestName);",
									"} else {",
									"    pm.environment.unset(\"nameIndex\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{invalidName}},\n    \"lastName\": \"{{lastName}}\",\n    \"dateBirth\": \"1940-12-01\",\n    \"country\": \"Poland\",\n    \"photo\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user's profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomPastDate() {",
									"    const currentDate = new Date(milliseconds=0);",
									"    const randomDays = Math.floor(Math.random() * (365 * 100)); ",
									"    const pastDate = new Date(currentDate);",
									"    pastDate.setDate(currentDate.getDate() - randomDays);",
									"    ",
									"    return pastDate.toISOString(); ",
									"}",
									"pm.variables.set(\"date\", getRandomPastDate());",
									"",
									"",
									"",
									"",
									"",
									"",
									"// function getRandomDate() {",
									"//     let year = Math.floor(Math.random() * (2024 - 1900)) + 1900;",
									"//     let date = year + '-';",
									"//     let month = Math.floor(Math.random() * (12 - 1)) + 1;",
									"//     if (month <= 9) {",
									"//         date += '0' + month;",
									"//     } else {",
									"//         date += month;",
									"//     }",
									"//     date += '-';",
									"//     if (month === 2) {",
									"//         day = Math.floor(Math.random() * (28 - 1)) + 1;",
									"//         if (day <= 9) {",
									"//             date += '0' + day;",
									"//         } else {",
									"//             date += day;",
									"//         }",
									"//     } else {",
									"//         day = Math.floor(Math.random() * (30 - 1)) + 1;",
									"//         if (day <= 9) {",
									"//             date += '0' + day;",
									"//         } else {",
									"//             date += day;",
									"//         }",
									"//     }",
									"//     return date;",
									"// }",
									"",
									"// date = getRandomDate();",
									"// pm.variables.set(\"date\", date);",
									"// console.log(date);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"let responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Name is match\", function () {",
									"    pm.expect(responseBody.data.name).to.be.a('string');",
									"    pm.expect(requestBody.name).to.equal(responseBody.data.name);",
									"});",
									"",
									"pm.test(\"Last name is match\", function () {",
									"    pm.expect(responseBody.data.lastName).to.be.a('string');",
									"    pm.expect(requestBody.lastName).to.equal(responseBody.data.lastName);",
									"});",
									"",
									"pm.test(\"Date birth is match\", function () {",
									"    pm.expect(responseBody.data.dateBirth).to.be.a('string');",
									"    pm.expect(requestBody.dateBirth).to.equal(responseBody.data.dateBirth);",
									"    pm.expect(responseBody.data.dateBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"pm.test(\"Country is match\", function () {",
									"    pm.expect(responseBody.data.country).to.be.a('string');",
									"    pm.expect(requestBody.country).to.equal(responseBody.data.country);",
									"});",
									"",
									"console.log(pm.variables.get(\"date\"));",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"dateBirth\": \"{{date}}\",\n    \"country\": \"{{$randomCountry}}\",\n    \"photo\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user's password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generatePassword() {",
									"    const upperChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    const lowerChars = 'abcdefghijklmnopqrstuvwxyz';",
									"    const digits = '0123456789';",
									"    const symbols = '!@#$%^&*()_+-=[]{}|;:/,.<>?';",
									"",
									"    let result = '';",
									"",
									"    for (let i = 0; i < 3; i++) {",
									"        result += upperChars.charAt(Math.floor(Math.random() * upperChars.length));",
									"    }",
									"    for (let i = 0; i < 3; i++) {",
									"        result += lowerChars.charAt(Math.floor(Math.random() * lowerChars.length));",
									"    }",
									"    for (let i = 0; i < 3; i++) {",
									"        result += digits.charAt(Math.floor(Math.random() * digits.length));",
									"    }",
									"    for (let i = 0; i < 3; i++) {",
									"        result += symbols.charAt(Math.floor(Math.random() * symbols.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"pm.variables.set(\"newPassword\", generatePassword());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"password\", pm.variables.get(\"newPassword\"));",
									"",
									"let responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User ID is match\", function() {",
									"    pm.expect(responseBody.data.userId).to.equal(pm.environment.get(\"userID\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"oldPassword\": \"{{password}}\",\n    \"password\": \"{{newPassword}}\",\n    \"repeatPassword\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/password",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body status is 'ok'\", function () {",
									"    pm.expect(responseBody.status).to.equal(\"ok\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body status is 'ok'\", function () {",
									"    pm.expect(responseBody.status).to.equal(\"ok\");",
									"});",
									"",
									"pm.test(\"Distance Units is 'km'\", function () {",
									"    pm.expect(responseBody.data.distanceUnits).to.equal(\"km\");",
									"});",
									"",
									"pm.test(\"Currency is 'usd'\", function () {",
									"    pm.expect(responseBody.data.currency).to.equal(\"usd\");",
									"});",
									"",
									"pm.test(\"User ID is match\", function() {",
									"    pm.expect(responseBody.data.userId).to.equal(pm.environment.get(\"userID\"));",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"remember\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseBody = pm.response.json();",
									"",
									"pm.environment.set(\"carID\", responseBody.data.id);",
									"pm.environment.set(\"mileage\", responseBody.data.mileage);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body status is 'ok'\", function () {",
									"    pm.expect(responseBody.status).to.equal(\"ok\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"carBrandId\": 1,\n    \"carModelId\": 1,\n    \"mileage\": 1400\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/cars",
							"host": [
								"{{url}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new expence",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getCurrentDate() {",
									"    const currentDate = new Date();",
									"",
									"    const year = currentDate.getFullYear();",
									"    const month = String(currentDate.getMonth() + 1).padStart(2, '0');",
									"    const day = String(currentDate.getDate()).padStart(2, '0');",
									"    return `${year}-${month}-${day}`;",
									"}",
									"",
									"pm.variables.set(\"currentDate\", getCurrentDate());",
									"",
									"function setNewMileage() {",
									"    let currentMileage = pm.environment.get(\"mileage\"); ",
									"    const reportedMileage = pm.variables.get(\"mileage\");",
									"",
									"    ",
									"    if (currentMileage <= reportedMileage) {",
									"        currentMileage = reportedMileage + 1;",
									"    }",
									"",
									"    return currentMileage;",
									"}",
									"",
									"pm.environment.set('mileage', setNewMileage());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body status is 'ok'\", function () {",
									"    pm.expect(responseBody.status).to.equal(\"ok\");",
									"});",
									"",
									"pm.test(\"Car ID matches\", function () {",
									"    pm.expect(responseBody.data.carId).to.equal(parseInt(pm.environment.get(\"carID\")));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"carId\": {{carID}},\n    \"reportedAt\": \"{{currentDate}}\",\n    \"mileage\": {{mileage}},\n    \"liters\": 11,\n    \"totalCost\": 11,\n    \"forceMileage\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/expenses",
							"host": [
								"{{url}}"
							],
							"path": [
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body status is 'ok'\", function () {",
									"    pm.expect(responseBody.status).to.equal(\"ok\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}